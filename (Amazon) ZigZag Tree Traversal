//zigzag traversal
#include <iostream>
#include <stack>
using namespace std;

struct node
{
    int data;
    struct node *left , *right;
};

void zigzag(struct node *root)
{
    if(!root)
    return;
    
    stack<struct node *>curr;
    stack<struct node *>next;
    
    curr.push(root);
    bool lefttoright = true;
    
    while(!curr.empty())
    {
        struct node *temp = curr.top();
        curr.pop();
        
        if(temp)
        {
            cout << temp -> data << " ";
            if(lefttoright)
            {
                if(temp->left)
                next.push(temp->left);
                if(temp->right)
                next.push(temp->right);
            }
            else
            {
                if(temp->right)
                next.push(temp->right);
                if(temp->left)
                next.push(temp->left);
            }
        }
        
        if(curr.empty())
        {
            lefttoright = !lefttoright;
            swap(curr,next);
        }
    }
}

struct node *newnode(int data)
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = data;
    temp->left = temp->right = NULL;
    
    return temp;
}
int main()
{
    struct node *root = newnode(1);
    root -> left = newnode(2);
    root -> right = newnode(3);
    root -> left -> left = newnode(7);
    root -> left -> right = newnode(6);
    root -> right -> left = newnode(5);
    root -> right -> right = newnode(4);
    
   zigzag(root);
   
   
    return 0;
}
