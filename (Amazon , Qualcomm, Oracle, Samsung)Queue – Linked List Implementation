//Time complexity : O(1)
#include <stdio.h>
#include <stdlib.h>

//linked list
struct qnode
{
   int data;
   struct qnode *link;
};

struct queue
{
    struct qnode *rear,*front;
};

struct qnode *newnode(int data)
{
     struct qnode *q = (struct qnode *)malloc(sizeof(struct qnode));
     q -> data = data ;
     q -> link = NULL;
     
     return q;
}

void enqueue(struct queue *q,int data)
{
   struct qnode *temp = newnode(data);
   
   if(q->rear == NULL)
   {
       q -> front = q -> rear = temp;
   }
   
   q -> rear -> link  = temp;
   q -> rear = temp;
}

struct qnode *dequeue(struct queue *q)
{
    if(q->front == NULL)
    return NULL;
    
    struct qnode *temp = q -> front ;
    free(temp);
     q -> front = q -> front -> link;
     
    if(q->front == NULL)
    q->rear = NULL;
    
    return temp;
}
struct queue *createQueue()
{
    struct queue *q = (struct queue *)malloc(sizeof(struct queue));
    q -> front = q->rear = NULL;
    
    return q;
}

void traverse(struct queue *q)
{
    while(q->front != NULL)
    {
    printf("%d ",q->front->data);
    q -> front  = q -> front -> link;
    }
}

int main()
{
   struct queue *q = createQueue();
   enqueue(q,10);
   enqueue(q,20);
   dequeue(q);
   enqueue(q,30);
   enqueue(q,40);
   traverse();
    return 0;
}
